<?php
/*--------------------------------------------------------
 * Module Name : ApplianceManager
 * Version : 1.0.0
 *
 * Software Name : OpenServicesAccess
 * Version : 2.0
 *
 * Copyright (c) 2011 â€“ 2014 Orange
 * This software is distributed under the Apache 2 license
 * <http://www.apache.org/licenses/LICENSE-2.0.html>
 *
 *--------------------------------------------------------
 * File Name   : ApplianceManager/ApplianceManager.php/nodes/nodeDAO.php
 *
 * Created     : 2013-11
 * Authors     : Benoit HERARD <benoit.herard(at)orange.com>
 *
 * Description :
 *      Manage database access for node object
 *--------------------------------------------------------
 * History     :
 * 1.0.0 - 2013-11-12 : Release of the file
*/
require_once '../objects/Error.class.php';
require_once '../objects/Node.class.php';
require_once '../include/Constants.php';
require_once '../include/Func.inc.php';
require_once '../include/Settings.ini.php';
require_once '../include/BDMySQL.inc';
require_once '../include/BDControls.inc';
require_once '../groups/groupDAO.php';




function getNode($nodeName = NULL, $request_data = NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;
	$error = new Error();
	
	$nodeName=normalizeName($nodeName);
	
	$cnx = new Connexion();
	if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}

	$rqt = new RequeteResultat();
	if ($nodeName != NULL && $nodeName != ""){
		$nodeName=str_replace(" ", "", $nodeName);
		$strSQL = "SELECT * FROM nodes WHERE nodeName='" . DoubleQuote($nodeName, NODENAME_LENGTH) . "'";
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
		if ($rqt->EOF()){
			$error->setHttpStatus(404);
			$error->setHttpLabel("Unknown node");
			$error->setFunctionalCode(4);
			$error->setFunctionalLabel("Node ". $nodeName . " does not exists");
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$node = new Node($rqt);
			$rc= $node;
		}
		$rqt->Fermer();
	}else{
		$strSQLComp="";
		
		if (isset($request_data["nodeNameFilter"]) && $request_data["nodeNameFilter"]!=""){
			$strSQLComp = addSQLFilter("nodeName like '%" . DoubleQuote($request_data["nodeNameFilter"]) . "%'", $strSQLComp);
		}
		if (isset($request_data["nodeDescriptionFilter"]) && $request_data["nodeDescriptionFilter"]!=""){
			$strSQLComp = addSQLFilter("nodeDescription like '%" . DoubleQuote($request_data["nodeDescriptionFilter"]) . "%'", $strSQLComp);
		}
		if (isset($request_data["localIPFilter"]) && $request_data["localIPFilter"]!=""){
			$strSQLComp = addSQLFilter("localIP like '%" . DoubleQuote($request_data["localIPFilter"]) . "%'", $strSQLComp);
		}
		if (isset($request_data["portFilter"]) && $request_data["portFilter"]!=""){
			$strSQLComp = addSQLFilter("port=" . $request_data["portFilter"] , $strSQLComp);
		}
		if (isset($request_data["serverFQDNFilter"]) && $request_data["serverFQDNFilter"]!=""){
			$strSQLComp = addSQLFilter("serverFQDN like '%" . DoubleQuote($request_data["serverFQDNFilter"]) . "%'" , $strSQLComp);
		}
		$strSQL="SELECT * FROM nodes n" . $strSQLComp	;
		if (isset($request_data["order"]) && $request_data["order"] != ""){
			$strSQL=$strSQL . " ORDER BY " . $request_data["order"];
		}
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		$rc = Array();
		while (!$rqt->EOF()){
			$node = new Node($rqt);
			array_push ($rc, $node);
			$rqt->Suivant();
		}
		$rqt->Fermer();
	}
	$cnx->Fermer();
	return $rc;
}



function addNode($nodeName = NULL, $request_data = NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;
	$error = new Error();
			
	$nodeName=normalizeName($nodeName);		


	$error->setHttpStatus(200);
	$error->setHttpLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"nodes\"");


	$error->setFunctionalLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"nodes\"\n");
	$error->setFunctionalCode(0);

	if ($nodeName == NULL || $nodeName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "nodeName is required\n");
	}else{
		$nodeName=str_replace(" ", "", $nodeName);
		$mySQLnodeName="'" . DoubleQuote($nodeName, NODENAME_LENGTH) . "'";
	}

	if (isset($request_data["nodeDescription"])){
		$mySQLnodeDescription="'" . DoubleQuote($request_data["nodeDescription"], NODEDESCRIPTION_LENGTH) . "'";
	}else{
		$mySQLnodeDescription="null"; 
	}
	if ($request_data["serverFQDN"] == NULL || $request_data["serverFQDN"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "serverFQDN is required\n");
	}else{
		$mySQLserverFQDN="'" . DoubleQuote($request_data["serverFQDN"], LOCALIP_LENGTH) . "'";
	}
	if ($request_data["localIP"] == NULL || $request_data["localIP"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "localIP is required\n");
	}else{
		$mySQLlocalIP="'" . DoubleQuote($request_data["localIP"], LOCALIP_LENGTH) . "'";
	}
	if ($request_data["port"] == NULL || $request_data["port"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "listening port is required\n");
	}else if (is_numeric($request_data["port"]) && $request_data["port"]>0){
		$mySQLport=$request_data["port"];
	}else{
			$error->setHttpStatus(400);
			$error->setFunctionalCode(1);
			$error->setFunctionalLabel($error->getFunctionalLabel() . " allowed value for port is a positive integer\n");
	}
	if (isset($request_data["isHTTPS"])){
		if ($request_data["isHTTPS"]=="1" ||  $request_data["isHTTPS"]=="0"){
			$mySQLisHTTPS=$request_data["isHTTPS"];
		}else{
			$error->setHttpStatus(400);
			$error->setFunctionalCode(1);
			$error->setFunctionalLabel($error->getFunctionalLabel() . " allowed value for isHTTPS is 0 or 1\n");
		}
	}else{
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "isHTTPS is required\n");
	}
	if (isset($request_data["isBasicAuthEnabled"])){
		if ($request_data["isBasicAuthEnabled"]=="1" ||  $request_data["isBasicAuthEnabled"]=="0"){
			$mySQLisBasicAuthEnabled=$request_data["isBasicAuthEnabled"];
		}else{
			$error->setHttpStatus(400);
			$error->setFunctionalCode(1);
			$error->setFunctionalLabel($error->getFunctionalLabel() . " allowed value for isBasicAuthEnabled is 0 or 1\n");
		}
	}else{
			$mySQLisBasicAuthEnabled=1;
	}
	if (isset($request_data["isCookieAuthEnabled"])){
		if ($request_data["isCookieAuthEnabled"]=="1" ||  $request_data["isCookieAuthEnabled"]=="0"){
			$mySQLisCookieAuthEnabled=$request_data["isCookieAuthEnabled"];
		}else{
			$error->setHttpStatus(400);
			$error->setFunctionalCode(1);
			$error->setFunctionalLabel($error->getFunctionalLabel() . " allowed value for isCookieAuthEnabled is 0 or 1\n");
		}
	}else{
			$mySQLisCookieAuthEnabled=1;
	}
	if (isset($request_data["additionalConfiguration"])){
			$mySQLadditionalConfiguration="'" . DoubleQuote($request_data["additionalConfiguration"]) . "'";
	}else{
			$mySQLadditionalConfiguration="NULL";
	}




	if ($error->getHttpStatus() != 200){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}else{
		$strSQL = "INSERT INTO nodes (nodeName, nodeDescription, serverFQDN, localIP, port, isBasicAuthEnabled, isCookieAuthEnabled, isHTTPS, additionalConfiguration) values ($mySQLnodeName,$mySQLnodeDescription,$mySQLserverFQDN,$mySQLlocalIP,$mySQLport,$mySQLisBasicAuthEnabled,$mySQLisCookieAuthEnabled,$mySQLisHTTPS,$mySQLadditionalConfiguration)";
		$cnx = new Connexion();

		if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd )){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$rqt = new RequeteResultat();
			if (!$rqt->Executer($strSQL,$cnx)){
				$error->setFunctionalCode(5);
				if (strpos($rqt->Erreur->GetTexte(),"Duplicate entry")>0){
					$error->setHttpStatus(409);
					$error->setFunctionalLabel("Node " . $nodeName . " already exists");
				}else{
					$error->setHttpStatus(500);
					$error->setFunctionalLabel($rqt->Erreur->GetTexte());
				}
			}
			$cnx->Fermer();
		}
	}
	if ($error->getHttpStatus() != 200){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}else{
		return getNode($nodeName);
	}
	
}






function deleteNode($nodeName = NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;
	$error = new Error();
	
	$nodeName=normalizeName($nodeName);
	
	$cnx = new Connexion();
	if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}

	$rqt = new RequeteResultat();
	if (isset($nodeName) && isset($nodeName) != ""){
		$nodeName=str_replace(" ", "", $nodeName);
		$strSQL = "SELECT * FROM nodes WHERE nodeName='" . DoubleQuote($nodeName, USERNAME_LENGTH) . "'";
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
		if ($rqt->EOF()){
			$error->setHttpStatus(404);
			$error->setHttpLabel("Unknown node");
			$error->setFunctionalCode(4);
			$error->setFunctionalLabel("Node ". $nodeName . " does not exists");
			$rqt->Fermer();
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$node = new Node($rqt);
			$strSQL="DELETE FROM nodes WHERE  nodeName='" . DoubleQuote($nodeName, USERNAME_LENGTH) . "'";
			if (!$rqt->Executer($strSQL, $cnx)){
				$error->setHttpStatus(500);
				$error->setFunctionalCode(3);
				$error->setFunctionalLabel($rqt->Erreur->GetTexte());
				$cnx->Fermer();
				throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
			}
			$rc = $node->toArray();
			
		}
		$rqt->Fermer();
	}else{
		$error->setHttpLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"node\"");
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "nodeName is required\n");
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}
	$cnx->Fermer();
	return $rc;
}




function updateNode($nodeName = NULL, $request_data = NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;

	$nodeName=normalizeName($nodeName);


	$error = new Error();
	$error->setHttpStatus(200);

	if ($nodeName == NULL || $nodeName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "nodeName is required\n");
	}else{
		$nodeName=str_replace(" ", "", $nodeName);
		$mySQLnodeName="'" . DoubleQuote($nodeName, USERNAME_LENGTH) . "'";
	}

	if (isset($request_data["nodeDescription"])){
		$mySQLnodeDescription="'" . DoubleQuote($request_data["nodeDescription"], NODEDESCRIPTION_LENGTH) . "'";
	}else{
		$mySQLnodeDescription="null"; 
	}
	if ($request_data["serverFQDN"] == NULL || $request_data["serverFQDN"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "serverFQDN is required\n");
	}else{
		$mySQLserverFQDN="'" . DoubleQuote($request_data["serverFQDN"], LOCALIP_LENGTH) . "'";
	}
	if ($request_data["localIP"] == NULL || $request_data["localIP"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "localIP is required\n");
	}else{
		$mySQLlocalIP="'" . DoubleQuote($request_data["localIP"], LOCALIP_LENGTH) . "'";
	}
	if ($request_data["port"] == NULL || $request_data["port"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "listening port is required\n");
	}else if (is_numeric($request_data["port"]) && $request_data["port"]>0){
		$mySQLport=$request_data["port"];
	}else{
			$error->setHttpStatus(400);
			$error->setFunctionalCode(1);
			$error->setFunctionalLabel($error->getFunctionalLabel() . " allowed value for port is a positive integer\n");
	}
	if (isset($request_data["isHTTPS"])){
		if ($request_data["isHTTPS"]=="1" ||  $request_data["isHTTPS"]=="0"){
			$mySQLisHTTPS=$request_data["isHTTPS"];
		}else{
			$error->setHttpStatus(400);
			$error->setFunctionalCode(1);
			$error->setFunctionalLabel($error->getFunctionalLabel() . " allowed value for isHTTPS is 0 or 1\n");
		}
	}else{
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "isHTTPS is required\n");
	}
	if (isset($request_data["isBasicAuthEnabled"])){
		if ($request_data["isBasicAuthEnabled"]=="1" ||  $request_data["isBasicAuthEnabled"]=="0"){
			$mySQLisBasicAuthEnabled=$request_data["isBasicAuthEnabled"];
		}else{
			$error->setHttpStatus(400);
			$error->setFunctionalCode(1);
			$error->setFunctionalLabel($error->getFunctionalLabel() . " allowed value for isBasicAuthEnabled is 0 or 1\n");
		}
	}else{
			$mySQLisBasicAuthEnabled=1;
	}
	if (isset($request_data["isCookieAuthEnabled"])){
		if ($request_data["isCookieAuthEnabled"]=="1" ||  $request_data["isCookieAuthEnabled"]=="0"){
			$mySQLisCookieAuthEnabled=$request_data["isCookieAuthEnabled"];
		}else{
			$error->setHttpStatus(400);
			$error->setFunctionalCode(1);
			$error->setFunctionalLabel($error->getFunctionalLabel() . " allowed value for isCookieAuthEnabled is 0 or 1, not " . $request_data["isCookieAuthEnabled"] ."\n");
		}
	}else{
			$mySQLisCookieAuthEnabled=1;
	}
	if (isset($request_data["additionalConfiguration"])){
			$mySQLadditionalConfiguration="'" . DoubleQuote($request_data["additionalConfiguration"]) ."'";
	}else{
			$mySQLadditionalConfiguration="NULL";
	}


	if ($error->getHttpStatus() != 200){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}else{
		$strSQL = "";

		$strSQL = $strSQL  . "UPDATE nodes SET ";
		$strSQL = $strSQL  . "      nodeDescription=$mySQLnodeDescription, ";
		$strSQL = $strSQL  . "      isHTTPS=$mySQLisHTTPS, ";
		$strSQL = $strSQL  . "      isCookieAuthEnabled=$mySQLisCookieAuthEnabled, ";
		$strSQL = $strSQL  . "      isBasicAuthEnabled=$mySQLisBasicAuthEnabled, ";
		$strSQL = $strSQL  . "      localIP=$mySQLlocalIP, ";
		$strSQL = $strSQL  . "      port=$mySQLport, ";
		$strSQL = $strSQL  . "      serverFQDN=$mySQLserverFQDN, ";
		$strSQL = $strSQL  . "      additionalConfiguration=$mySQLadditionalConfiguration ";
		$strSQL = $strSQL  . "WHERE nodeName=$mySQLnodeName";
		$cnx = new Connexion();
		
		if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd )){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$rqt = new RequeteResultat();
			if (!$rqt->Executer($strSQL,$cnx)){
				$error->setHttpStatus(500);
				$error->setFunctionalCode(3);
				$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			}
			$cnx->Fermer();
		}
		if ($error->getHttpStatus() != 200){
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
	}
	return getNode($nodeName);
}

function updateCert($nodeName, $cert){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;

	$nodeName=normalizeName($nodeName);

	$error = new Error();
	$error->setHttpStatus(200);

	if ($nodeName == NULL || $nodeName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "nodeName is required\n");
	}else{
		$nodeName=str_replace(" ", "", $nodeName);
		$mySQLnodeName="'" . DoubleQuote($nodeName, USERNAME_LENGTH) . "'";
	}

	$mySQLcert="'" . DoubleQuote($cert) . "'";



	if ($error->getHttpStatus() != 200){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}else{
		$strSQL = "";

		$strSQL = $strSQL  . "UPDATE nodes SET ";
		$strSQL = $strSQL  . "      cert=$mySQLcert ";
		$strSQL = $strSQL  . "WHERE nodeName=$mySQLnodeName";
		$cnx = new Connexion();
		
		if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd )){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$rqt = new RequeteResultat();
			if (!$rqt->Executer($strSQL,$cnx)){
				$error->setHttpStatus(500);
				$error->setFunctionalCode(3);
				$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			}
			$cnx->Fermer();
		}
		if ($error->getHttpStatus() != 200){
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
	}
}

function updatePrivateKey($nodeName, $key){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;

	$nodeName=normalizeName($nodeName);

	$error = new Error();
	$error->setHttpStatus(200);

	if ($nodeName == NULL || $nodeName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "nodeName is required\n");
	}else{
		$nodeName=str_replace(" ", "", $nodeName);
		$mySQLnodeName="'" . DoubleQuote($nodeName, USERNAME_LENGTH) . "'";
	}

	$mySQLkey="'" . DoubleQuote($key) . "'";



	if ($error->getHttpStatus() != 200){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}else{
		$strSQL = "";

		$strSQL = $strSQL  . "UPDATE nodes SET ";
		$strSQL = $strSQL  . "      privateKey=$mySQLkey ";
		$strSQL = $strSQL  . "WHERE nodeName=$mySQLnodeName";
		$cnx = new Connexion();
		
		if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd )){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$rqt = new RequeteResultat();
			if (!$rqt->Executer($strSQL,$cnx)){
				$error->setHttpStatus(500);
				$error->setFunctionalCode(3);
				$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			}
			$cnx->Fermer();
		}
		if ($error->getHttpStatus() != 200){
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
	}
}

