<?php
/*--------------------------------------------------------
 * Module Name : ApplianceManager
 * Version : 1.0.0
 *
 * Software Name : OpenServicesAccess
 * Version : 2.0
 *
 * Copyright © 2011 – 2012 France Télécom
 * This software is distributed under the Apache 2 license
 * <http://www.apache.org/licenses/LICENSE-2.0.html>
 *
 *--------------------------------------------------------
 * File Name   : ApplianceManager/ApplianceManager.php/users/userDAO.php
 *
 * Created     : 2013-11
 * Authors     : Benoit HERARD <benoit.herard(at)orange.com>
 *
 * Description :
 *      Manage database access for user object
 *--------------------------------------------------------
 * History     :
 * 1.0.0 - 2013-11-12 : Release of the file
*/
require_once '../objects/Error.class.php';
require_once '../objects/Group.class.php';
require_once '../objects/User.class.php';
require_once '../objects/Quota.class.php';
require_once '../objects/Service.class.php';
require_once '../include/Constants.php';
require_once '../include/Func.inc.php';
require_once '../include/Settings.ini.php';
require_once '../include/BDMySQL.inc';
require_once '../include/BDControls.inc';
require_once '../groups/groupDAO.php';




function getUser($userName = NULL, $request_data = NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;
	$error = new Error();
			

	$userName=normalizeName($userName);
		


	$cnx = new Connexion();
	if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}

	$rqt = new RequeteResultat();
	if ($userName != NULL && $userName != ""){
		$strSQL = "SELECT * FROM users WHERE userName='" . DoubleQuote($userName, USERNAME_LENGTH) . "'";
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
		if ($rqt->EOF()){
			$error->setHttpStatus(404);
			$error->setHttpLabel("Unknown user");
			$error->setFunctionalCode(4);
			$error->setFunctionalLabel("User ". $userName . " does not exists");
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$user = new User($rqt);
			$rc= $user->toArray();
		}
		$rqt->Fermer();
	}else{
		$strSQLComp="";
		if (isset($request_data["withLog"])){
			$strSQLComp=" WHERE exists(SELECT 'x' FROM hits h WHERE h.userName=u.userName)";
		}
		
		if (isset($request_data["userNameFilter"]) && $request_data["userNameFilter"]!=""){
			$strSQLComp = addSQLFilter("userName like '%" . DoubleQuote($request_data["userNameFilter"]) . "%'", $strSQLComp);
		}
		if (isset($request_data["firstNameFilter"]) && $request_data["firstNameFilter"]!=""){
			$strSQLComp = addSQLFilter("firstName like '%" . DoubleQuote($request_data["firstNameFilter"]) . "%'", $strSQLComp);
		}
		if (isset($request_data["lastNameFilter"]) && $request_data["lastNameFilter"]!=""){
			$strSQLComp = addSQLFilter("lastName like '%" . DoubleQuote($request_data["lastNameFilter"]) . "%'", $strSQLComp);
		}
		if (isset($request_data["emailAddressFilter"]) && $request_data["emailAddressFilter"]!=""){
			$strSQLComp = addSQLFilter("emailAddress like '%" . DoubleQuote($request_data["emailAddressFilter"]) . "%'", $strSQLComp);
		}
		if (isset($request_data["entityFilter"]) && $request_data["entityFilter"]!=""){
			$strSQLComp = addSQLFilter("entity like '%" . DoubleQuote($request_data["entityFilter"]) . "%'", $strSQLComp);
		}
		$strSQL="SELECT * FROM users u" . $strSQLComp	;
		if (isset($request_data["order"]) && $request_data["order"] != ""){
			$strSQL=$strSQL . " ORDER BY " . $request_data["order"];
		}
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		$rc = Array();
		while (!$rqt->EOF()){
			$user = new User($rqt);
			array_push ($rc, $user->toArray());
			$rqt->Suivant();
		}
		$rqt->Fermer();
	}
	$cnx->Fermer();
	return $rc;
}



function addUser($userName = NULL, $request_data = NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;

	$userName=normalizeName($userName);
	
	$error = new Error();
			
		


	$error->setHttpStatus(200);
	$error->setHttpLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"user\"");


	$error->setFunctionalLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"user\"\n");
	$error->setFunctionalCode(0);

	if ($userName == NULL || $userName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "userName is required\n");
	}else{
		$mySQLuserName="'" . DoubleQuote($userName, USERNAME_LENGTH) . "'";
	}
	if (isset($request_data["lastName"])){
		$mySQLLastname="'" . DoubleQuote($request_data["lastName"], USERNAME_LENGTH) . "'";
	}else{
		$mySQLLastname="null"; 
	}
	if (isset($request_data["firstName"])){
		$mySQLFirstname="'" . DoubleQuote($request_data["firstName"], FIRSTNAME_LENGTH) . "'";
	}else{
		$mySQLFirstname="null"; 
	}
	if (isset($request_data["entity"])){
		$mySQLEntity="'" . DoubleQuote($request_data["entity"], ENTITY_LENGTH) . "'";
	}else{
		$mySQLEntity="null"; 
	}
	if (!isset($request_data["password"]) || $request_data["password"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "password is required\n");
	}else{
		$mySQLPassword="'" . encrypt($request_data["password"], PASSWORD_LENGTH) . "'";
		$mySQLmd5Password= "'" . md5($request_data["password"]) . "'";
	}

	if (!isset($request_data["email"]) || $request_data["email"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "email address is required\n");
	}else{
		$mySQLEmail="'" . DoubleQuote($request_data["email"], EMAIL_LENGTH) . "'";
	}

	if (!isset($request_data["endDate"]) || $request_data["endDate"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "endDate is required\n");
	}else{
		if ( ereg( "([0-9]{4})-([0-9]{2})-([0-9]{2})", $request_data["endDate"], $regs ) ) {
		  $mySQLEndDate = "'$regs[1]-$regs[2]-$regs[3] 00:00:00'";
		} else {
			$error->setHttpStatus(400);
			$error->setFunctionalCode(2);
			$error->setFunctionalLabel($error->getFunctionalLabel() . "Invalid date format for \"" . $request_data["endDate"] . "\" YYYY-MM-DD (iso) expected\n");
		}
	}


	if ($error->getHttpStatus() != 200){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}else{
		$strSQL = "INSERT INTO users (userName, password, md5Password, endDate, emailAddress, firstName, lastName, entity) values ($mySQLuserName,$mySQLPassword,$mySQLmd5Password,$mySQLEndDate,$mySQLEmail,$mySQLFirstname,$mySQLLastname,$mySQLEntity)";
		$cnx = new Connexion();
		
		if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd )){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$rqt = new RequeteResultat();
			if (!$rqt->Executer($strSQL,$cnx)){
				$error->setFunctionalCode(5);
				if (strpos($rqt->Erreur->GetTexte(),"Duplicate entry")>0){
					$error->setHttpStatus(409);
					$error->setFunctionalLabel("User " . $userName . " already exists");
				}else{
					$error->setHttpStatus(500);
					$error->setFunctionalLabel($rqt->Erreur->GetTexte());
				}
			}
			$cnx->Fermer();
		}
		
		if ($error->getHttpStatus() != 200){
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			return getUser($userName);
		}
	}
}






function deleteUser($userName = NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;

	$userName=normalizeName($userName);

	$error = new Error();

	$cnx = new Connexion();
	if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}

	$rqt = new RequeteResultat();
	if (isset($userName) && isset($userName) != ""){
		if ($userName == ADMIN_USER){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel("User Admin MUST NOT be deleted");
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		$strSQL = "SELECT * FROM users WHERE userName='" . DoubleQuote($userName, USERNAME_LENGTH) . "'";
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
		if ($rqt->EOF()){
			$error->setHttpStatus(404);
			$error->setHttpLabel("Unknown user");
			$error->setFunctionalCode(4);
			$error->setFunctionalLabel("User ". $userName . " does not exists");
			$rqt->Fermer();
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$user = new User($rqt);
			$strSQL="DELETE FROM users WHERE  userName='" . DoubleQuote($userName, USERNAME_LENGTH) . "'";
			if (!$rqt->Executer($strSQL, $cnx)){
				$error->setHttpStatus(500);
				$error->setFunctionalCode(3);
				$error->setFunctionalLabel($rqt->Erreur->GetTexte());
				$cnx->Fermer();
				throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
			}
			$strSQL="DELETE FROM counters WHERE  counterName like '%U=" . DoubleQuote($userName, USERNAME_LENGTH) . "%'";
			if (!$rqt->Executer($strSQL, $cnx)){
				$error->setHttpStatus(500);
				$error->setFunctionalCode(3);
				$error->setFunctionalLabel($rqt->Erreur->GetTexte());
				$cnx->Fermer();
				throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
			}
			$rc = $user->toArray();
			
		}
		$rqt->Fermer();
	}else{
		$error->setHttpLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"user\"");
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "userName is required\n");
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}
	$cnx->Fermer();
	return $rc;
}




function updateUser($userName = NULL, $request_data = NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;
	$error = new Error();


	$userName=normalizeName($userName);


	if ($userName == NULL || $userName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "userName is required\n");
	}else{
		$mySQLuserName= "'" . DoubleQuote($userName, USERNAME_LENGTH) . "'";
	}
	if (isset($request_data["password"])){
		if ($request_data["password"]=="" ){
			$error->setHttpStatus(400);
			$error->setFunctionalCode(1);
			$error->setFunctionalLabel($error->getFunctionalLabel() . "password is required\n");
		}else{
			$mySQLPassword= "'" . encrypt($request_data["password"]) . "'";
			$mySQLmd5Password="'" . md5($request_data["password"]) . "'";
		}
	}else{
		$mySQLPassword="password";
	}
	if (isset($request_data["email"])) { 
		if($request_data["email"]=="" ){
			$error->setHttpStatus(400);
			$error->setFunctionalCode(1);
			$error->setFunctionalLabel($error->getFunctionalLabel() . "email address is required\n");
		}else{
			$mySQLEmail="'" . DoubleQuote($request_data["email"], EMAIL_LENGTH) . "'";
		}
	}else{
		$mySQLEmail="emailAddress";
	}

	if (isset($request_data["endDate"])){
		if ($request_data["endDate"]=="" ){
			$error->setHttpStatus(400);
			$error->setFunctionalCode(1);
			$error->setFunctionalLabel($error->getFunctionalLabel() . "endDate is required\n");
		}else{
			if ( ereg( "([0-9]{4})-([0-9]{2})-([0-9]{2})", $request_data["endDate"], $regs ) ) {
			  $mySQLEndDate = "'$regs[1]-$regs[2]-$regs[3] 00:00:00'";
			} else {
				$error->setHttpStatus(400);
				$error->setFunctionalCode(2);
				$error->setFunctionalLabel($error->getFunctionalLabel() . "Invalid date format for \"" . $request_data["endDate"] . "\" YYYY-MM-DD (iso) expected\n");
			}
		}
	}else{
		$mySQLEndDate="endDate";
	}


	if (isset($request_data["lastName"])){
		$mySQLLastname="'" . DoubleQuote($request_data["lastName"], USERNAME_LENGTH) . "'";
	}else{
		$mySQLLastname="lastName"; 
	}
	if (isset($request_data["firstName"])){
		$mySQLFirstname="'" . DoubleQuote($request_data["firstName"], FIRSTNAME_LENGTH) . "'";
	}else{
		$mySQLFirstname="firstName"; 
	}
	if (isset($request_data["entity"])){
		$mySQLEntity="'" . DoubleQuote($request_data["entity"], ENTITY_LENGTH) . "'";
	}else{
		$mySQLEntity="entity"; 
	}


	if ($error->getHttpStatus() != 200){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}else{
		$strSQL = "";

		$strSQL = $strSQL  . "UPDATE users SET ";
		$strSQL = $strSQL  . "      password=$mySQLPassword, ";
		$strSQL = $strSQL  . "      md5Password=$mySQLmd5Password, ";
		$strSQL = $strSQL  . "      endDate=$mySQLEndDate, ";
		$strSQL = $strSQL  . "      emailAddress=$mySQLEmail, ";
		$strSQL = $strSQL  . "      firstName=$mySQLFirstname, ";
		$strSQL = $strSQL  . "      lastName=$mySQLLastname, ";
		$strSQL = $strSQL  . "      entity=$mySQLEntity ";
		$strSQL = $strSQL  . "WHERE userName=$mySQLuserName";
		$cnx = new Connexion();
		
		if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd )){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$rqt = new RequeteResultat();
			if (!$rqt->Executer($strSQL,$cnx)){
				$error->setHttpStatus(500);
				$error->setFunctionalCode(3);
				$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			}
			$cnx->Fermer();
		}
		if ($error->getHttpStatus() != 200){
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
	}
	return getUser($userName);
}




function getUserGroup($userName, $groupName= NULL, $request_data){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;



	$userName=normalizeName($userName);
	$groupName=normalizeName($groupName);


	$error = new Error();
	$cnx = new Connexion();

	if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}

	$rqt = new RequeteResultat();
		$strSQL="SELECT g.* FROM groups g, usersgroups ug where g.groupName = ug.groupName and ug.userName='" . DoubleQuote($userName, USERNAME_LENGTH) . "'";
	if ($groupName != NULL && $groupName != ""){
		$strSQL .= " AND g.groupName='" . DoubleQuote($groupName, GROUPNAME_LENGTH) . "'";
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
		if ($rqt->EOF()){
			$error->setHttpStatus(404);
			$error->setHttpLabel("Unknown group");
			$error->setFunctionalCode(4);
			$error->setFunctionalLabel("Group ". $groupName . " does not exists for user " . $userName);
			$rqt->Fermer();
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$group = new Group($rqt);
			$rc = $group->toArray();
					
		}
		$rqt->Fermer();
	}else{
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		$rc = Array();
		while (!$rqt->EOF()){
			$group = new Group($rqt);
			array_push($rc, $group->toArray());
			$rqt->Suivant();
		}
		$rqt->Fermer();
	}
	$cnx->Fermer();
	return $rc;
}



function getAvailableGroup($userName, $request_data){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;

	$userName=normalizeName($userName);

	$error = new Error();
	$cnx = new Connexion();
	if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}

	$rqt = new RequeteResultat();
	$strSQL="SELECT g.* FROM groups g where g.groupName not in (SELECT ug.groupName FROM  usersgroups ug WHERE  ug.userName='" . DoubleQuote($userName, USERNAME_LENGTH) . "')";
	if (!$rqt->Ouvrir($strSQL, $cnx)){
		$error->setHttpStatus(500);
		$error->setFunctionalCode(3);
		$error->setFunctionalLabel($rqt->Erreur->GetTexte());
		$cnx->Fermer();
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}
	$rc = Array();
	while (!$rqt->EOF()){
		$group = new Group($rqt);
		array_push($rc, $group->toArray());
		$rqt->Suivant();
	}
	$rqt->Fermer();
	$cnx->Fermer();
	return $rc;
}




function addUserToGroup($userName, $groupName){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;


	$userName=normalizeName($userName);
	$groupName=normalizeName($groupName);

	$error = new Error();
	$error->setHttpStatus(200);
	$error->setHttpLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"group\"");


	$error->setFunctionalLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"group\"\n");
	$error->setFunctionalCode(0);

	if (!isset($groupName) || $groupName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "groupName is required\n");
	}
	if (!isset($userName) || $userName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "userName is required\n");
	}
	if ($error->getFunctionalCode()!=0){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}else{
		$mySQLGroupName=DoubleQuote($groupName, GROUPNAME_LENGTH);
		$mySQLuserName=DoubleQuote($userName, USERNAME_LENGTH);
		$strSQL = "INSERT INTO usersgroups (groupName, userName) values ('$mySQLGroupName','$mySQLuserName')";
		$cnx = new Connexion();
		
		if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd )){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
		}else{
			$rqt = new RequeteResultat();
			if (!$rqt->Executer($strSQL,$cnx)){
				if (strpos($rqt->Erreur->GetTexte(),"Duplicate entry")){
					$error->setHttpStatus(409);
					$error->setFunctionalCode(5);
					$error->setFunctionalLabel("Group " . $groupName . " already exists for user " . $userName);
					
				}else{
					$error->setHttpStatus(500);
					$error->setFunctionalCode(3);
					$error->setFunctionalLabel($rqt->Erreur->GetTexte());
					
					
				}
			}
			$cnx->Fermer();
		}
		
		if ($error->getHttpStatus() != 200){
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
	}
	return getGroup($groupName);
}




function removeUserFromGroup($userName, $groupName){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;


	$userName=normalizeName($userName);
	$groupName=normalizeName($groupName);

	$error = new Error();

	$cnx = new Connexion();
	if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}

	$rqt = new RequeteResultat();
	if ($groupName != NULL && $groupName != ""){
		if ($groupName == ADMIN_GROUP && $userName == ADMIN_USER){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel("Admin group MUST NOT be removed for Admin user");
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		$strSQL = "SELECT g.* FROM groups g, usersgroups ug WHERE ug.groupName='" . DoubleQuote($groupName, GROUPNAME_LENGTH) . "' AND ug.userName='" . DoubleQuote($userName, USERNAME_LENGTH) . "' AND g.groupName = ug.groupName";
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
		if ($rqt->EOF()){
			$error->setHttpStatus(404);
			$error->setHttpLabel("Unknown group");
			$error->setFunctionalCode(4);
			$error->setFunctionalLabel("Group ". $groupName . " does not exists");
			$rqt->Fermer();
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
			
		}else{
			$group = new Group($rqt);
			$strSQL="DELETE FROM usersgroups WHERE groupName='" . DoubleQuote($groupName, GROUPNAME_LENGTH) . "' AND userName='" . DoubleQuote($userName, USERNAME_LENGTH) . "'";
			if (!$rqt->Executer($strSQL, $cnx)){
				$error->setHttpStatus(500);
				$error->setFunctionalCode(3);
				$error->setFunctionalLabel($rqt->Erreur->GetTexte());
				$cnx->Fermer();
				throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
			}
			$rc = $group->toArray();
			
		}
		$rqt->Fermer();
	}else{
		$error->setHttpLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"group\"");
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "groupName is required\n");
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}
	$cnx->Fermer();
	return $rc;

}



function getUserQuota($userName, $serviceName=NULL, $request_data=NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;


	$userName=normalizeName($userName);
	$serviceName=normalizeName($serviceName);


	if ($userName == NULL || $userName==""){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "userName is required\n");
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}

	$cnx = new Connexion();
	if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}



	$rqt = new RequeteResultat();
	$strSQL="SELECT * FROM usersquotas WHERE userName='" . DoubleQuote($userName, USERNAME_LENGTH ) . "'";
	if ($serviceName != NULL && $serviceName != ""){
		$strSQL .= " AND serviceName='" . DoubleQuote($serviceName, SERVICENAME_LENGTH) . "'";
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
		if ($rqt->EOF()){
			$error->setHttpStatus(404);
			$error->setHttpLabel("Unknown quotas");
			$error->setFunctionalCode(4);
			$error->setFunctionalLabel("Quotas for user ". $userName . " and service " . $serviceName . " does not exists for user " . $userName);
			$rqt->Fermer();
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$quota = new Quota($rqt);
			$rc = $quota->toArray();
					
		}
		$rqt->Fermer();
	}else{
		if (isset($request_data["order"]) && $request_data["order"] != ""){
			$strSQL .= " ORDER BY " . $request_data["order"];
		}
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		$rc = Array();
		while (!$rqt->EOF()){
			$quota = new quota($rqt);
			array_push($rc, $quota->toArray());
			$rqt->Suivant();
		}
		$rqt->Fermer();
	}
	$cnx->Fermer();
	return $rc;
}



function addUserQuota($userName, $serviceName, $request_data=NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;

	$userName=normalizeName($userName);
	$serviceName=normalizeName($serviceName);
	


	$error = new Error();
	$error->setHttpStatus(200);
	$error->setHttpLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"quota\"");


	$error->setFunctionalLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"quota\"\n");
	$error->setFunctionalCode(0);

	if ($serviceName == NULL || $serviceName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "serviceName is required\n");
	}
	if ($userName == NULL || $userName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "userName is required\n");
	}
	if (!isset($request_data["reqSec"]) || $request_data["reqSec"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "reqSec is required\n");
	}
	if (!isset($request_data["reqDay"]) || $request_data["reqDay"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "reqDay is required\n");
	}
	if (!isset($request_data["reqMonth"]) || $request_data["reqMonth"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "reqMonth is required\n");
	}
	if ($error->getFunctionalCode()!=0){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}else{
		$mySQLServiceName=DoubleQuote($serviceName, SERVICENAME_LENGTH);
		$mySQLuserName=DoubleQuote($userName, USERNAME_LENGTH);
		$strSQL = "";
		$strSQL .="INSERT INTO usersquotas (";
		$strSQL .="	serviceName, ";
		$strSQL .="	userName,";
		$strSQL .="	reqSec,";
		$strSQL .="	reqDay,";
		$strSQL .="	reqMonth) ";
		$strSQL .="values (";
		$strSQL .="	'$mySQLServiceName',";
		$strSQL .="	'$mySQLuserName',";
		$strSQL .= $request_data["reqSec"] . ",";
		$strSQL .= $request_data["reqDay"] . ",";
		$strSQL .= $request_data["reqMonth"] . ")";
		$cnx = new Connexion();
		
		if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd )){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
		}else{
			$rqt = new RequeteResultat();
			if (!$rqt->Executer($strSQL,$cnx)){
				if (strpos($rqt->Erreur->GetTexte(),"Duplicate entry")){
					$error->setHttpStatus(409);
					$error->setFunctionalCode(5);
					$error->setFunctionalLabel("Quota for service " . $serviceName . " and user " . $userName . " already exists");
					
				}elseif (strpos($rqt->Erreur->GetTexte(),"foreign key constraint fails")){
					$error->setHttpStatus(404);
					$error->setFunctionalCode(6);
					$error->setFunctionalLabel("Service " . $serviceName . " or user " . $userName . " does not exists");
				}else{
					$error->setHttpStatus(500);
					$error->setFunctionalCode(3);
					$error->setFunctionalLabel($rqt->Erreur->GetTexte());
					
					
				}
			}
			$cnx->Fermer();
		}
		
		if ($error->getHttpStatus() != 200){
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		return getUserQuota($userName, $serviceName);
	}
}


function getUnsetQuota($userName){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;

	$userName=normalizeName($userName);


	$error = new Error();

	$cnx = new Connexion();
	if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}

	$rqt = new RequeteResultat();
	$strSQL="SELECT *, '" . DoubleQuote($userName, USERNAME_LENGTH) ."' userName FROM services WHERE isUserQuotasEnabled=1 AND serviceName not in (SELECT serviceName FROM  usersquotas WHERE  userName='" . DoubleQuote($userName, USERNAME_LENGTH) . "')";
	if (!$rqt->Ouvrir($strSQL, $cnx)){
		$error->setHttpStatus(500);
		$error->setFunctionalCode(3);
		$error->setFunctionalLabel($rqt->Erreur->GetTexte());
		$cnx->Fermer();
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}
	$rc=Array();
	while (!$rqt->EOF()){
		$service = new Quota($rqt);
		array_push($rc, $service->toArray());
		$rqt->Suivant();
	}
	
	$rqt->Fermer();
	$cnx->Fermer();
	return $rc;
}




function updateUserQuotas($userName, $serviceName, $request_data){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;

	$userName=normalizeName($userName);
	$serviceName=normalizeName($serviceName);

	$error = new Error();
	$error->setHttpStatus(200);
	$error->setHttpLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"quota\"");


	$error->setFunctionalLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"quota\"\n");
	$error->setFunctionalCode(0);

	if ($serviceName == NULL || $serviceName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "serviceName is required\n");
	}
	if ($userName==NULL || $userName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "userName is required\n");
	}
	if (!isset($request_data["reqSec"]) || $request_data["reqSec"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "reqSec is required\n");
	}
	if (!isset($request_data["reqDay"]) || $request_data["reqDay"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "reqDay is required\n");
	}
	if (!isset($request_data["reqMonth"]) || $request_data["reqMonth"]=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "reqMonth is required\n");
	}
	if ($error->getFunctionalCode()!=0){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}else{
		$mySQLServiceName=DoubleQuote($serviceName, SERVICENAME_LENGTH);
		$mySQLuserName=DoubleQuote($userName, USERNAME_LENGTH);
		$strSQL = "";
		$strSQL .="UPDATE usersquotas SET";
		$strSQL .="	reqSec=" . $request_data["reqSec"] . ",";
		$strSQL .="	reqDay=" . $request_data["reqDay"] . ",";
		$strSQL .="	reqMonth=" . $request_data["reqMonth"] . " ";
		$strSQL .="WHERE ";
		$strSQL .="		serviceName='$mySQLServiceName' ";
		$strSQL .="AND	userName='$mySQLuserName'";
		$cnx = new Connexion();
		
		if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd )){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
		}else{
			$rqt = new RequeteResultat();
			if (!$rqt->Executer($strSQL,$cnx)){
				if (strpos($rqt->Erreur->GetTexte(),"Duplicate entry")){
					$error->setHttpStatus(409);
					$error->setFunctionalCode(5);
					$error->setFunctionalLabel("Quota for service " . $serviceName . " and user " . $userName . " already exists");
					
				}elseif (strpos($rqt->Erreur->GetTexte(),"foreign key constraint fails")){
					$error->setHttpStatus(404);
					$error->setFunctionalCode(6);
					$error->setFunctionalLabel("Service " . $serviceName . " or user " . $userName . " does not exists");
				}else{
					$error->setHttpStatus(500);
					$error->setFunctionalCode(3);
					$error->setFunctionalLabel($rqt->Erreur->GetTexte());
					
					
				}
			}
			$cnx->Fermer();
		}
		
		if ($error->getHttpStatus() != 200){
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		return getUserQuota($userName, $serviceName);
	}
}




function deleteUserQuotas($userName, $serviceName, $request_data){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;

	$userName=normalizeName($userName);
	$serviceName=normalizeName($serviceName);

	$error = new Error();
	$error->setHttpStatus(200);
	$error->setHttpLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"quota\"");


	$error->setFunctionalLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"quota\"\n");
	$error->setFunctionalCode(0);

	if ($serviceName==NULL || $serviceName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "serviceName is required\n");
	}
	if ($userName==NULL || $userName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "userName is required\n");
	}
	if ($error->getFunctionalCode()!=0){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
	}else{
		
		
		$cnx = new Connexion();
		if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
				$error->setHttpStatus(500);
				$error->setFunctionalCode(3);
				$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
				throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}
		
		$rqt = new RequeteResultat();
		$strSQL = "SELECT * FROM  usersquotas WHERE serviceName='" . DoubleQuote($serviceName, SERVICENAME_LENGTH) . "' AND userName='" . DoubleQuote($userName, USERNAME_LENGTH) . "'"; 
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();	
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());			
		}
		
		if ($rqt->EOF()){
			$error->setHttpStatus(404);
			$error->setHttpLabel("Unknown quotas");
			$error->setFunctionalCode(4);
			$error->setFunctionalLabel("Quotas for service ". $serviceName . " and user " . $userName . " does not exists");
			$rqt->Fermer();
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		}else{
			$quotas = new Quota($rqt);
			$strSQL="DELETE FROM usersquotas WHERE serviceName='" . DoubleQuote($serviceName, SERVICENAME_LENGTH) . "' AND userName='" . DoubleQuote($userName, USERNAME_LENGTH) . "'";
			if (!$rqt->Executer($strSQL, $cnx)){
				$error->setHttpStatus(500);
				$error->setFunctionalCode(3);
				$error->setFunctionalLabel($rqt->Erreur->GetTexte());
				$cnx->Fermer();
				throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
			}
			
			
		}
		$rqt->Fermer();
		$cnx->Fermer();
		return $quotas->toArray();
	}
}
