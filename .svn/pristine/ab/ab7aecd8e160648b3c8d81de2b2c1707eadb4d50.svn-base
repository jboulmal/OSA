<?php
/*--------------------------------------------------------
 * Module Name : ApplianceManager
 * Version : 1.0.0
 *
 * Software Name : OpenServicesAccess
 * Version : 2.0
 *
 * Copyright (c) 2011 â€“ 2014 Orange
 * This software is distributed under the Apache 2 license
 * <http://www.apache.org/licenses/LICENSE-2.0.html>
 *
 *--------------------------------------------------------
 * File Name   : ApplianceManager/ApplianceManager.php/groups/groupDAO.php
 *
 * Created     : 2013-11
 * Authors     : Benoit HERARD <benoit.herard(at)orange.com>
 *
 * Description :
 *      Manage database access for group object
 *--------------------------------------------------------
 * History     :
 * 1.0.0 - 2013-11-12 : Release of the file
*/
require_once '../objects/Error.class.php';
require_once '../objects/Group.class.php';
require_once '../objects/User.class.php';
require_once '../include/Constants.php';
require_once '../include/Func.inc.php';
require_once '../include/Settings.ini.php';
require_once '../include/BDMySQL.inc';
require_once '../include/BDControls.inc';




function getGroup($groupName = NULL, $request_data = NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;


	$groupName=normalizeName($groupName);


	$error = new Error();
	$cnx = new Connexion();
	if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		
	}

	$rqt = new RequeteResultat();
	if ($groupName != NULL){
		$strSQL = "SELECT * FROM groups WHERE groupName='" . DoubleQuote($groupName, GROUPNAME_LENGTH) . "'";
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
			
		}
		
		if ($rqt->EOF()){
			$error->setHttpStatus(404);
			$error->setHttpLabel("Unknown group");
			$error->setFunctionalCode(4);
			$error->setFunctionalLabel("Group ". $groupName . " does not exists");
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
		}else{
			$group = new Group($rqt);
			$rc = $group->toArray();
			
		}
		$rqt->Fermer();
	}else{
		$strSQLComp="";
		if (isset($request_data["descriptionFilter"]) && $request_data["descriptionFilter"]!=""){
			$strSQLComp = addSQLFilter("description like '%" . DoubleQuote($request_data["descriptionFilter"]) . "%'", $strSQLComp);
		}
		if (isset($request_data["groupNameFilter"]) && $request_data["groupNameFilter"]!=""){
			$strSQLComp = addSQLFilter("groupName like '%" . DoubleQuote($request_data["groupNameFilter"]) . "%'", $strSQLComp);
		}
		if (isset($request_data["filter"])){
			$strSQLComp=addSQLFilter($request_data["filter"],$strSQLComp);
		}
		
		$strSQL="SELECT * FROM groups" . $strSQLComp;
		if (isset($request_data["order"]) && $request_data["order"] != ""){
			$strSQL=$strSQL . " ORDER BY " . $request_data["order"];
		}

		
		if (!$rqt->Ouvrir($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
			
		}
		$rc=Array();
		while (!$rqt->EOF()){
			$group = new Group($rqt);
			array_push($rc,$group->toArray());
			$rqt->Suivant();
		}
		$rqt->Fermer();
	}
	$cnx->Fermer();
	return $rc;
}
function getGroupMembers($groupName, $request_data = NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;
	
	
	$groupName=normalizeName($groupName);
	
	
	
	$error = new Error();
	$cnx = new Connexion();
	if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
		
	}

	$rqt = new RequeteResultat();
	if ($groupName != VALID_USER_GROUP){
		$strSQL="SELECT u.* FROM users u, usersgroups ug WHERE ug.userName = u.userName AND ug.groupName='" . DoubleQuote($groupName, GROUPNAME_LENGTH) . "'";
	}else{
		$strSQL="SELECT u.* FROM users u WHERE endDate is NULL or endDate < now()";
	}
	if (isset($request_data["order"]) && $request_data["order"] != ""){
		$strSQL=$strSQL . " ORDER BY " . $request_data["order"];
	}
	
	if (!$rqt->Ouvrir($strSQL, $cnx)){
		$error->setHttpStatus(500);
		$error->setFunctionalCode(3);
		$error->setFunctionalLabel($rqt->Erreur->GetTexte());
		$cnx->Fermer();
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
		
	}
	$rc=Array();
	while (!$rqt->EOF()){
		$user = new User($rqt);
		array_push($rc,$user->toArray());
		$rqt->Suivant();
	}
	$rqt->Fermer();
	$cnx->Fermer();
	return $rc;
}



function addGroup($groupName = NULL, $description = NULL){
	GLOBAL $BDName;
	GLOBAL $BDUser;
	GLOBAL $BDPwd;


	$groupName=normalizeName($groupName);



	$error = new Error();
	$error->setHttpStatus(200);
	$error->setHttpLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"group\"");


	$error->setFunctionalLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"group\"\n");
	$error->setFunctionalCode(0);

	if ($groupName==NULL){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "groupName is required\n");
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
	}else{
		$groupName = str_replace(" ","_", $groupName);
		$mySQLGroupName=DoubleQuote($groupName, GROUPNAME_LENGTH);
	}
	if ($description==NULL ){
		$mySQLDescritpion="";
	}else{
		$mySQLDescritpion=DoubleQuote($description, DESCRIPTION_LENGTH);
	}


	$strSQL = "INSERT INTO groups (groupName, description) values ('$mySQLGroupName','$mySQLDescritpion')";
	$cnx = new Connexion();
	
	if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd )){
		$error->setHttpStatus(500);
		$error->setFunctionalCode(3);
		$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
	}else{
		$rqt = new RequeteResultat();
		if (!$rqt->Executer($strSQL,$cnx)){
			if (strpos($rqt->Erreur->GetTexte(),"Duplicate entry")){
			$error->setHttpStatus(500);
				$error->setHttpStatus(409);
				$error->setFunctionalCode(5);
				$error->setFunctionalLabel("Group " . $groupName . " already exists");
				
			}else{
				$error->setFunctionalCode(3);
				$error->setFunctionalLabel($rqt->Erreur->GetTexte());
				
				
			}
		}
		$cnx->Fermer();
	}
	
	if ($error->getHttpStatus() != 200){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
	}
	return getGroup($groupName);
}





function deleteGroup($groupName){
GLOBAL $BDName;
GLOBAL $BDUser;
GLOBAL $BDPwd;

$groupName=normalizeName($groupName);


$error = new Error();
$cnx = new Connexion();
if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd)){
		$error->setHttpStatus(500);
		$error->setFunctionalCode(3);
		$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
		exit(1);
	
}

$rqt = new RequeteResultat();
if ($groupName!= NULL && $groupName != ""){
	$strSQL = "SELECT * FROM groups WHERE groupName='" . DoubleQuote($groupName, GROUPNAME_LENGTH) . "'";
	if (!$rqt->Ouvrir($strSQL, $cnx)){
		$error->setHttpStatus(500);
		$error->setFunctionalCode(3);
		$error->setFunctionalLabel($rqt->Erreur->GetTexte());
		$cnx->Fermer();
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
		exit(1);
		
	}
	
	if ($rqt->EOF()){
		$error->setHttpStatus(404);
		$error->setHttpLabel("Unknown group");
		$error->setFunctionalCode(4);
		$error->setFunctionalLabel("Group ". $groupName . " does not exists");
		$rqt->Fermer();
		$cnx->Fermer();
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
	}else{
		if ($groupName==ADMIN_GROUP || $groupName == VALID_USER_GROUP){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel(ADMIN_GROUP . " group must not be suppressed");
			if (strpos($rqt->Erreur->GetTexte(),"a foreign key constraint fails")){
				$error->setFunctionalLabel("The group " . $groupName . " is used by some services. Please remove subscribtions and services referencing it first");
			}
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
		}
		$group = new Group($rqt);
		$strSQL="DELETE FROM groups WHERE  groupName='" . DoubleQuote($groupName, GROUPNAME_LENGTH) . "'";
		if (!$rqt->Executer($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			if (strpos($rqt->Erreur->GetTexte(),"a foreign key constraint fails")){
				$error->setFunctionalLabel("The group " . $groupName . " is used by some services. Please remove subscribtions and services referencing it first");
			}
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
			
		}
		$strSQL="DELETE FROM counters WHERE  counterName like '%U=" . DoubleQuote($groupName, GROUPNAME_LENGTH) . "%'";
		if (!$rqt->Executer($strSQL, $cnx)){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			$cnx->Fermer();
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());
			
		}
		$group->toArray();
		
	}
	$rqt->Fermer();
}else{
	$error->setHttpLabel("Bad request for method \"" . $_SERVER["REQUEST_METHOD"] . "\" for resource \"group\"");
	$error->setHttpStatus(400);
	$error->setFunctionalCode(1);
	$error->setFunctionalLabel($error->getFunctionalLabel() . "groupName is required\n");
	throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
}
$cnx->Fermer();
return $group->toArray();
}





function updateGroup($groupName = NULL, $description = NULL){
GLOBAL $BDName;
GLOBAL $BDUser;
GLOBAL $BDPwd;

	$groupName=normalizeName($groupName);


	$error = new Error();
	if ($groupName == NULL || $groupName=="" ){
		$error->setHttpStatus(400);
		$error->setFunctionalCode(1);
		$error->setFunctionalLabel($error->getFunctionalLabel() . "groupName is required\n");
	}else{
		$mySQLGroupName=DoubleQuote($groupName, GROUPNAME_LENGTH);
	}
	if ($description != NULL && $description!="" ){
		$mySQLDescription=DoubleQuote($description, DESCRIPTION_LENGTH);
	}else{
		$mySQLDescription="";
	}



	if ($error->getHttpStatus() != 200){
		throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
	}else{
		$strSQL = "";

		$strSQL = $strSQL  . "UPDATE groups SET ";
		$strSQL = $strSQL  . "      description='$mySQLDescription' ";
		$strSQL = $strSQL  . "WHERE groupName='$mySQLGroupName'";
		$cnx = new Connexion();
		
		if (!$cnx->Ouvrir($BDName, $BDUser, $BDPwd )){
			$error->setHttpStatus(500);
			$error->setFunctionalCode(3);
			$error->setFunctionalLabel($cnx->GetErreur()->GetTexte());
		}else{
			$rqt = new RequeteResultat();
			if (!$rqt->Executer($strSQL,$cnx)){
				$error->setHttpStatus(500);
				$error->setFunctionalCode(3);
				$error->setFunctionalLabel($rqt->Erreur->GetTexte());
			}
			$cnx->Fermer();
		}
		
		if ($error->getHttpStatus() != 200){
			throw new Exception($error->GetFunctionalLabel(), $error->getHttpStatus());;
		}
		return getGroup($groupName);
	}
}	
